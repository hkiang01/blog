[
{
	"uri": "https://hkiang01.github.io/kubernetes/",
	"title": "Kubernetes",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Kubernetes A few things I learned about Kubernetes\n Wildcard Certs  How to secure your cluster\u0026rsquo;s services using TLS    "
},
{
	"uri": "https://hkiang01.github.io/",
	"title": "Some reading material",
	"tags": [],
	"description": "",
	"content": "Blog My name is Harrison Kiang and this is my blog. I work with Kubernetes and Machine Learning.\nI have been meaning to make a blog for awhile now. I finally found a way to do it without it being too much of a drag. This was built with Hugo Learn Theme. It looks nice and allows me to just focus on content creation and automates away a lot of the overhead. I can write in Markdown, create Mermaid diagrams, etc.\nArticles Kubernetes  Wildcard Certs  How to secure your cluster\u0026rsquo;s services using TLS    "
},
{
	"uri": "https://hkiang01.github.io/kubernetes/wildcard-certs/",
	"title": "Wildcard certs",
	"tags": [],
	"description": "",
	"content": "Once you have NGINX set up, each of your services can sit behind an Ingress with a host resembling something close to myservice.mydomain.com. That\u0026rsquo;s great and all, but you\u0026rsquo;ll find that your connections aren\u0026rsquo;t secured until you configure TLS.\nSome understanding You\u0026rsquo;ll need to pass a DNS-01 challenge. The challenge itself is run by servers from a certificate authority (CA) such as Let\u0026rsquo;s Encrypt. Those serveres expect your web server to be reachable from whatever IP address your domain points to.\nClusters with a public IP It\u0026rsquo;s fairly straightforward to secure your services via cert-manager as the Let\u0026rsquo;s Encrypt servers will be able to reach your node clusters (which play the role of your web server).\nClusters without a public IP Solutions like cert-manager won\u0026rsquo;t work out of the box here. Essentially you\u0026rsquo;ll need to stand up a web service apart from your cluster that has a static IP for the sole purpose of getting the pem certs requried to generate your TLS Secrets. AWS, Google Cloud, etc., are able to provide here.\nNote: the following instructions are tested on a server running Ubuntu 20.04:\n  Set up a server with a publicly accessible static IP address either in the cloud or some other hosting provider you trust.\n  Create an A record pointing to its static IP. Below is an example:\n  Replace the IP address Value with your server\u0026rsquo;s static IP.\nInstall the following in the same server:   certbot  used to get tls cert from Let\u0026rsquo;s Encrypt   nginx  used as the installer plugin when combining plugins   kubectl  used to locally render the secret to copy over to our private cluster    In your publicly available server, create an index.html file that will display something.  # server with publicly available static ip cd /var/www sudo mkdir tutorial cd tutorial sudo \u0026#34;${EDITOR:-vi}\u0026#34; index.html \u0026lt;!-- index.html --\u0026gt; \u0026lt;!-- This is what the nginx server will return --\u0026gt; \u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello, Nginx!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello, Nginx!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;We have just configured our Nginx web server on Ubuntu Server!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; In your publicly available server, configure NGINX as shown below:  # server with publicly available static ip cd /etc/nginx/sites-enabled sudo \u0026#34;${EDITOR:-vi}\u0026#34; tutorial server { listen 80; listen [::]:80; server_name *.mydomain.com; root /var/www/tutorial; index index.html; location / { try_files $uri $uri/ =404; } } The above config is just a simple nginx server that listens on a wildcard path returning a simple response.\nIn your publicly available server, use certbot with the manual plugin as the authenticator and the nginx plugin as the installer to grant your wildcard cert:  # server with publicly available static ip certbot run -a manual -i nginx -d *.mydomain.com When prompted, create a TXT record in your DNS like below:  Be careful to not put your domain in as the Host in the TXT record\nWhen you successfully acquire your wildcard cert, create the Kubernetes TLS secret in your publicly available server, like below:  # server with publicly available static ip # only sudo has access to the directory we need to get to sudo -s cd /etc/letsencrypt/live/mydomain.com/ # create the TLS secret kubectl -n gitlab create secret tls mydomain-dot-com-wildcard-tls --cert fullchain.pem --key privkey.pem --dry-run -o yaml \u0026gt; mydomain-com-wildcard-tls.yaml # move the yaml file to someplace you\u0026#39;ll be able to scp from on your local machine, likely your user\u0026#39;s home directory mv mydomain-com-wildcard-tls.yaml /home/myuser/ Move your secret to your local machine  # local machine scp my_user@my_server_ip:/home/myuser/mydomain-com-wildcard-tls.yaml . You likely want to change the namespace of your secret so that when you apply it it\u0026rsquo;s available for your service to reference by name. Change metadata.namespace accordingly, for example:  # mydomain-com-wildcard-tls.yaml ... metadata: namespace: my-namespace ... Apply the secret  kubectl apply mydomain-com-wildcard-tls.yaml  You can now guard your service using your newly created cert. Here\u0026rsquo;s an example of TLS termination using ingress-nginx\n  Oh yeah, you probably want to delete your NGINX web server instance so as not keeping your TLS secrets \u0026ldquo;exposed\u0026rdquo;\u0026hellip;.\n  "
},
{
	"uri": "https://hkiang01.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hkiang01.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]